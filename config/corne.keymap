#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>

#define BASE    0
#define LOWER   1
#define RAISE   2
#define FUN     3

#define LEFT_W  LC(LG(LEFT))    /* Win+Ctrl+Left  */
#define RIGHT_W LC(LG(RIGHT))   /* Win+Ctrl+Right */

 / {
    keymap {
        compatible = "zmk,keymap";

        // ===================== Layer 0: BASE =====================
        base_layer {
            label = "BASE";
            bindings = <
                // ╭───────────┬───────────┬───────────┬───────────┬────────────┬────────────╮ ╭───────────┬─────────────┬────────────┬────────────┬───────────┬────────────╮
                      &trans        &kp Q       &kp W       &kp E       &kp R         &kp T        &kp Y         &kp U       &kp I         &kp O       &kp P        &trans
                // ├───────────┼───────────┼───────────┼───────────┼────────────┼────────────┤ ├───────────┼─────────────┼────────────┼────────────┼────────────┼───────────┤
                      &trans        &kp A       &kp S       &kp D       &kp F         &kp G        &kp H         &kp J       &kp K         &kp L      &kp SEMI      &trans
                // ├───────────┼───────────┼───────────┼───────────┼────────────┼────────────┤ ├───────────┼─────────────┼────────────┼────────────┼────────────┼───────────┤
                      &trans        &kp Z       &kp X       &kp C       &kp V         &kp B        &kp N         &kp M      &kp COMMA     &kp DOT     &kp FSLH     &trans
                // ╰───────────┴───────────┴───────────┴───────────┴────────────┴────────────┴─┴───────────┴─────────────┴────────────┴────────────┴───────────┴────────────╯
                                    &sk LCTRL   &mo LOWER    &kp SPACE                                  &kp RET      &mo RAISE    &kp BSPC
            >;
        };

        // ===================== Layer 1: LOWER ====================
        lower_layer {
            label = "LOWER";
            bindings = <
                // ╭───────────┬───────────┬───────────┬───────────┬────────────┬────────────╮ ╭───────────┬─────────────┬────────────┬────────────┬───────────┬────────────╮
                     &trans       &kp TAB   &sk LSHIFT    &trans      &trans        &trans       &trans        &trans        &trans        &trans      &trans      &trans
                // ├───────────┼───────────┼───────────┼───────────┼────────────┼────────────┤ ├───────────┼─────────────┼────────────┼────────────┼────────────┼───────────┤
                      &trans       &kp N1      &kp N2      &kp N3      &kp N4       &kp N5        &kp N6        &kp N7        &kp N8        &kp N9     &kp N0       &trans
                // ├───────────┼───────────┼───────────┼───────────┼────────────┼────────────┤ ├───────────┼─────────────┼────────────┼────────────┼────────────┼───────────┤
                      &trans       &trans      &trans      &trans      &trans        &trans      &trans        &trans        &trans        &trans     &trans       &trans
                // ╰───────────┴───────────┴───────────┴───────────┴────────────┴────────────┴─┴───────────┴─────────────┴────────────┴────────────┴───────────┴────────────╯
                                    &mt LGUI   &mo LOWER    &sk LSHIFT                                &kp RET      &mo RAISE    &kp DEL
            >;
        };

        // ===================== Layer 2: RAISE ====================
        raise_layer {
            label = "RAISE";
            bindings = <
                // ╭───────────┬───────────┬───────────┬───────────┬────────────┬────────────╮ ╭───────────┬─────────────┬────────────┬────────────┬───────────┬────────────╮
                       &trans     &kp ESC      &trans      &trans      &trans        &trans        &trans        &trans     &kp UP        &trans      &trans        &trans
                // ├───────────┼───────────┼───────────┼───────────┼────────────┼────────────┤ ├───────────┼─────────────┼────────────┼────────────┼────────────┼───────────┤
                      &trans       &trans      &trans      &trans      &trans        &trans        &kp H       &kp LEFT      &kp DOWN    &kp RIGHT     &kp SEMI     &trans
                // ├───────────┼───────────┼───────────┼───────────┼────────────┼────────────┤ ├───────────┼─────────────┼────────────┼────────────┼────────────┼───────────┤
                     &trans       &trans      &trans      &trans      &trans        &trans         &trans       &trans       &trans       &trans       &trans       &trans
                // ╰───────────┴───────────┴───────────┴───────────┴────────────┴────────────┴─┴───────────┴─────────────┴────────────┴────────────┴───────────┴────────────╯
                                    &sk LCTRL   &mo LOWER    &kp LALT                                  &kp RET      &mo RAISE    &kp BSPC
            >;
        };

        // ===================== Layer 3: FUN =====================
        fun_layer {
            label = "FUN";
            bindings = <
                // ╭───────────┬───────────┬───────────┬───────────┬────────────┬────────────╮ ╭───────────┬─────────────┬────────────┬────────────┬───────────┬────────────╮
                      &trans       &kp F1      &kp F2      &kp F3      &kp F4        &kp F5      &kp CAPS      &to BASE      &trans       &trans      &bt BT_CLR   &trans
                // ├───────────┼───────────┼───────────┼───────────┼────────────┼────────────┤ ├───────────┼─────────────┼────────────┼────────────┼────────────┼───────────┤
                      &trans       &kp F6      &kp F7      &kp F8      &kp F9        &kp F10     &bt BT_PRV   &bt BT_NXT     &trans        &trans        &trans        &trans
                // ├───────────┼───────────┼───────────┼───────────┼────────────┼────────────┤ ├───────────┼─────────────┼────────────┼────────────┼────────────┼───────────┤
                      &trans     &kp LEFT_W  &kp RIGHT_W  &kp F11     &kp F12       &kp PSCRN    &trans      &trans        &trans        &trans        &trans        &trans
                // ╰───────────┴───────────┴───────────┴───────────┴────────────┴────────────┴─┴───────────┴─────────────┴────────────┴────────────┴───────────┴────────────╯
                                    &kp LALT    &trans  &trans                                     &trans        &trans    &trans
            >;
        };
    };

    // ===================== Combos =====================
    combos {
        compatible = "zmk,combos";

        /* Toggle FUN on BASE (positions 37 + 39 are your thumbs; adjust if needed) */
        combo_fun {
            timeout-ms = <50>;
            key-positions = <37 40>;
            layers = <BASE>;
            bindings = <&to FUN>;
        };

        /* Same combo on FUN to go back to BASE */
        combo_base {
            timeout-ms = <50>;
            key-positions = <37 40>;
            layers = <FUN>;
            bindings = <&to BASE>;
        };

       // Start/stop Alt (tap = one-shot, double-tap = lock, tap again = unlock)
       combo_alt_sticky {
           timeout-ms = <50>;
           key-positions = <2 3>;     // your original "first combo"
           layers = <BASE>;
           bindings = <&kt LALT>;
       };
       
       // Step forward (consumes the one-shot Alt, or uses locked Alt)
       combo_tab_fwd {
           timeout-ms = <50>;
           key-positions = <3 4>;     // your original "second combo" positions
           layers = <BASE>;
           bindings = <&kp TAB>;
       };
       
       // Step backward (Shift+Tab; Alt comes from one-shot/lock above)
       combo_tab_back {
           timeout-ms = <50>;
           key-positions = <1 2>;     // your original "third combo" positions
           layers = <BASE>;
           bindings = <&kp LS(TAB)>;
       };

       simple_classic_brace {
           timeout-ms = <50>;
           key-positions = <7 8>;    
           layers = <BASE>;
           bindings = <&kp LS(N9)>;
       };
       simple_classic_closing_brace {
           timeout-ms = <50>;
           key-positions = <8 9>;     
           layers = <BASE>;
           bindings = <&kp LS(N0)>;
       }

         simple_bracket {
           timeout-ms = <50>;
           key-positions = <19 20>;    
           layers = <BASE>;
           bindings = <&kp LBKT>;
       };
         simple_closing_bracket {
           timeout-ms = <50>;
           key-positions = <20 21>;    
           layers = <BASE>;
           bindings = <&kp LBKT>;
       };

         simple_brace {
           timeout-ms = <50>;
           key-positions = <31 32>;    
           layers = <BASE>;
           bindings = <&kp LBKT>;
       };
         simple_closing_brace {
           timeout-ms = <50>;
           key-positions = <32 33>;    
           layers = <BASE>;
           bindings = <&kp LBKT>;
       };
    };
};
